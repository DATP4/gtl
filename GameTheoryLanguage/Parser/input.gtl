int someVar = 3;
int x = 5;
str dasdsa = "dsadas";
print(dasdsa);

bool test23 = TRUE ^^ TRUE;

// Nonsensical function;
intFunction : (int aVar) -> int {
    int y = x + 10 * 5;

    if (x < 10 * 5) then {
        int z = 10 / 5;
        z
    }
    else if (x == 10) then {
        x MOD 2
    }
    else {
        int z = 10 * 5;
        z
    }
}

int funcTest = intFunction(someVar);

boolFunction : () -> bool {
    TRUE
}

bool a = boolFunction();

Moves = [cooperate, defect];

// Declare actions
Action oppDefect = (gamestate.lastMove("p2") == cooperate) then cooperate;
Action oppCooperate = (gamestate.lastMove("p2") == defect) then defect;
Action turn = (gamestate.turn == 1) then cooperate;
Action otherwise = () then defect;

Strategy aStrat1 = [
    oppDefect,
    oppCooperate,
    turn
];

Strategy aStrat2 = [
    otherwise
];

Strategyspace stratspace = [
    (cooperate, cooperate),
    (defect, cooperate),
    (cooperate, defect),
    (defect, defect)
];

Payoff payoff = [
    p1 -> [2,4,0,1],
    p2 -> [2,0,4,1]
];


Players p = [
    p1 chooses aStrat1,
    p2 chooses aStrat2
];

Game prisoners = (stratspace, p, payoff);

run(prisoners, 5);
